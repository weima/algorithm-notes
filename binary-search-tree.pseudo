"""
 Binary Search Tree is a binary tree with the following characteristics
 Let x be a Node in BST, y be another Node resides in x's LEFT sub tree,
 Then x.key >= y.key

 Let x be a Node in BST, y be another Node resides in x's RIGHT sub tree,
 Then x.key <= y.key
"""


type Side =
      | RIGHT
      | LEFT


type Node =
    key: Number
    side: Side
    parent: Node
    left_child: Node
    right_child: Node

NIL_Node = Node(
    key: Nil
    side: Nil
    parent: Nil
    left_child: Nil
    right_child: Nil
)

function search(n:Node, k:Number):
   """
     Params:
       n, a Node where the search starts
       k, a Number to search
     Precondition:
       None
     Postcondition:
       None
     Return:
       A Node conaining the searching key, otherwise NIL_NODE
   """
   if n ==  NIL_NODE:
       return NIL_NODE
   else if n.key == k:
       return n
   else if k < n.key:
       return search(n.left, k)
   else:
       return search(n.right, k)



function mininum(n: Node):
   """
   Find the Node containing the lowest value in a tree rooted at the input Node n
   Params:
     n, The root of the tree

   Precondition:
     n is not NIL_NODE

   Postcondition:
     None

   Return:
     A Node containing the lowest key
   """

   while n.left_child != NIL_NODE:
       n = n.left_child
   return n


function maximum(n: Node):
   """
   Find the Node containing the maximum key in a tree rooted at the input Node

   Params:
      n, The root of the tree

   Precondition:
      n is not NIL_NODE

   Postcondition:
      None

   Return:
      The Node containing the maximum key 
   """
   while n.right_child != NIL_NODE:
       n = n.right_child
   return n

function successor(n: Node):
   """
   Find a successor of the input Node.
   A successor of a Node is defined as:
       1. Let set S be a set of Nodes with key value greater than n.key;
       2. The successor to n is the Node resides in S and contains the smallest key

   Params:
      n, The input Node

   Precondition:
      n is not NIL_NODE

   Postcondition:
      None

   """

   # First try right child
   if n.right_child != NIL_NODE:
       return minimum(n.right_child)

   # Could not find right childe, and Node is already
   # the right most Node, then it's not possible to find
   # anything
   if n.side == RIGHT:
       return NIL_NODE

   #Could not find in right child, ask for parent
   let parent = n.parent





