"""
 A red-black tree is a balanced search tree. It has 5 characterastics:
 1. Every Node is Either RED or BLACK;
 2. Root of the Tree is BLACK;
 3. Starting from Any Node, the number of RED children and BLACK children
    are the same;
 4. Every RED Node has 2 BLACK children
 5. Every leaf Node is BLACK

 In this study we assume every Node carries a key of type number, so that we
 can perform comparison opertion on it.
"""

type Side:
    |RIGHT
    |LEFT

type Color:
    |BLACK
    |RED


type Node:
    key: Number
    side: Side
    color: Color
    parent: Node
    left_child: Node
    right_child: Node


"""
NIL_NODE is a special node that acts as sentinel value
to cover edge cases and to reduce complexity
"""
val NIL_NODE = Node(
    key: Number
    side: NIL
    color: BLACK,
    left_child: NIL
    right_child: NIL
    parent: NIL
)

function is_root(n: Node)-> boolean:
    """
    Test if a node is root of the tree

    Params:
      n, the Node to be tested

    Precondition:
      n is not NIL

    Postcondition:
      None

    Return:
      whether n is root of a tree
    """
    return n.parent == NIL_NODE

function opposite_side(side:Side):
    """
    Get the opposite side of input side

    Params:
      side, the input Side

    Precondition:
      None

    Postcondition:
      None

    Return:
     The opposite side of the input side
    """
    if side == LEFT:
        return RIGHT
    else:
        return LEFT


function get_child(n:Node, side:Side):
    """
     Get a child for a Node

     Params:
       n, a None
       side, the side where the child is located

     Precondition:
       n is not NIL_NODE

     Postcondition:
       None

     Return:
       The child Node resides on the input side
    """
    if side == RIGHT:
        return n.right_child
    else:
        return n.left_child


function has_child(n:Node, side:Side):
    """
     Test whether a node has a child resides at input side

     Params:
       n, a None
       side, the side where the child is located

     Precondition:
       n is not NIL_NODE

     Postcondition:
       None

     Return:
       Whether the node has a child resides at the input side
    """
    child = get_child(n, side)
    return child != NIL_NODE


function attach_child(parent: Node, child: Node, side: Side):
    """
    Attach a child node to a parent node to a specified side.

    Params:
       parent: The parent node
       child: The child node
       side: The side to be attached to

    Precondition:
       parent and child cannot both be NIL_NODE

    Postcondition:
       1. if parent is not NIL_NODE, its' child field of correct side is assigned to child
       2. if child is not NIL_NODE,
           2.1 its' parent field is assigned to parent node;
           2.2 its' side field is assigned to input parameter side;

    Return:
       None
    """
    child.parent = parent

    # Assign child to the child field of parent
    if parent != NIL_NODE:
        if side == RIGHT:
            parent.right_child = child
        else:
            parent.left_child = child

    # Assign parent and side value to child
    if child != NIL_NODE:
        child.parent = parent
        child.side = side

function adopt_children_from_parent(old_parent: Node, new_parent: Node):
    """
    Adopts children Nodes of one Node

    Params:
       new_parent: The new parent Node
       old_parent: The old parent Node

    Precondition:
       1. new parent must have room to adopt the child of the old parent, i.e.
          1.1. new parent cannot have both left and right child
          1.2. if old parent has right child, the new parent cannot have right child
          1.3. if old parent has left child, the new parent cannot have left child
       2. new parent cannot be the NIL_NODE

    Postcondition:
       The children of old parent are adopted by the new parent

    Return:
       None
    """
    if not new_parent.has_left_child():
        attach_child(parent=new_parent, child=old_parent.left_child, side=LEFT)
    if not new_parent.has_right_child():
        attach_child(parent=new_parent, child=old_parent.right_child, side=RIGHT)


function rotate(n:Node, side: Side):
    """
    Rotate a Node to input side
    Params:
      n, the node to be rotated

    Precondition:
      if side is LEFT
        n has a right child and does not have left child
        n's right child does not have a left child
      if side is RIGHT
        n has a left child and does not have right child
        n's left child does not have a right child

    Postcondition:
      n's child on the input side become its' parent, and n become the child on the opposite side of its' new parent

    Return:
      None
    """
    old_parent = n.parent
    old_side = n.side

    # new parent is n's child on the oppsite of input side
    new_parent = get_child(n, opposite_side(side))

    # attach new parent to old parent
    attach_child(parent=old_parent, child=new_parent, side = old_side)

    #attach n to new parent on the input side
    attach_child(parent=new_parent, child=n, side = side)


function rb_insert(tree: Tree, z: Node):
    """
     Insert a Node into red-black tree

     Params:
       tree, a Tree to insert Node into
       z, a Node to be inserted into the red-black tree

     Precondition:
       z is not NIL_NODE

     Postcondition:
       z is inserted into the red-black tree

     Return:
       None
    """

    # First find the position where the node can be inserted
    pass


function rb_delete(tree: Tree, z: Node):
    y = z
    y_origin_color = y.color

    """
      TODO: continue on this
    """
    pass
